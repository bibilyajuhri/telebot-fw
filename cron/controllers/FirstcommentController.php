<?php

namespace cron\controllers;

use apps\controllers\CronController;
use models\SessionLastpostid;
use models\QueueLikecomment;
use models\Acc;
use components\InstagramV2;
use components\BTele;

class FirstcommentController extends CronController{

	const INSTAGRAM_TARGET = [
		'dagelan', // di blokir
		// 'jakarta.keras',
		'lambe_turah',
		'mpl.id.official',
		// 'cristiano',
		// 'leomessi',
		// 'bts.bighitofficial',
		// 'justinbieber',
		// 'arditerwandha',
	];
	const AUTO_COMMENT_TARGET = [
		'cristiano',
		'leomessi',
		'bts.bighitofficial',
		'justinbieber'
	];
	const ACCOUNT_USED = [
		'nab.nabilaaa__'=> [
			'header'=> [
				'X-Ig-Www-Claim: hmac.AR3Aa2MzwbMsAmtsPe2PnYFER9svJPkz-aPLWDr4alAlzfWR',
				'X-Csrftoken: cdJcYJiT6mlkwr3WOb2W702RnqHJJ9hq'
			],
			'headerCookie'=> [
				'Cookie: csrftoken=cdJcYJiT6mlkwr3WOb2W702RnqHJJ9hq; mid=YqF3uQAEAAHAa_kyUyp2UFwcn6_u; ig_did=A69BC7A0-6B68-420E-89AD-7516781EDA45; ig_nrcb=1; ds_user_id=24034509603; sessionid=24034509603%3ALpJOpZlGNgP1Dp%3A6; datr=4nehYg2_SjV4Ap2iivQhNSxW; shbid=\"2113054240345096030541687705620:01f7c22941ddb06f4541b1bd87408ca3c45c082b1ad913e8ff77c22a2263b410a72bd31c\"; shbts=\"1656169620054240345096030541687705620:01f71a7576ca44ba2040ed0349a1ff214059bf9e76df20654eefbff9026e912378c9bf3b\"; rur=\"ATN054240345096030541687705661:01f7c5065ce2f731635b13e023ec03acb96df1b0e79ce78bb4efb93ec8bec8bba134d70e\"'
			]
		],
	];

	// Do not modify under this line //

	public function getInstagramHtml($username = 'beebil.jr'){
		$ch = curl_init();

		curl_setopt($ch, CURLOPT_URL, "https://i.instagram.com/api/v1/users/web_profile_info/?username={$username}");
		// curl_setopt($ch, CURLOPT_URL, "https://www.instagram.com/{$username}/feed/?__a=1&__d=1");
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
		curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');

		$headerFix = [
			"Host: i.instagram.com",
			// "x-ig-app-id: 567067343352427",
			"User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11",
		];

		curl_setopt($ch, CURLOPT_HTTPHEADER, $headerFix);

		$result = curl_exec($ch);
		if (curl_errno($ch)) {
		    echo 'Error:' . curl_error($ch);
		    return false;
		}
		// $info = curl_getinfo($ch);
		curl_close($ch);
		return $result;
	}

	public function getInstagramHtmlNew($username, $getAcc){
		// Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
		$ch = curl_init();

		curl_setopt($ch, CURLOPT_URL, 'https://i.instagram.com/api/v1/users/web_profile_info/?username='.$username);
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
		curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');

		curl_setopt($ch, CURLOPT_ENCODING, 'gzip, deflate');

		$headers = array();
		$headers[] = 'Authority: i.instagram.com';
		$headers[] = 'Accept: */*';
		$headers[] = 'Accept-Language: id,en-US;q=0.9,en;q=0.8';
		$headers[] = 'Cache-Control: no-cache';
		$headers[] = $getAcc->cookie;
		$headers[] = 'Origin: https://www.instagram.com';
		$headers[] = 'Pragma: no-cache';
		$headers[] = 'Referer: https://www.instagram.com/';
		$headers[] = 'Sec-Ch-Ua: \" Not A;Brand\";v=\"99\", \"Chromium\";v=\"102\", \"Google Chrome\";v=\"102\"';
		$headers[] = 'Sec-Ch-Ua-Mobile: ?0';
		$headers[] = 'Sec-Ch-Ua-Platform: \"Linux\"';
		$headers[] = 'Sec-Fetch-Dest: empty';
		$headers[] = 'Sec-Fetch-Mode: cors';
		$headers[] = 'Sec-Fetch-Site: same-site';
		$headers[] = 'User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36';
		$headers[] = 'X-Asbd-Id: 198387';
		$headers[] = $getAcc->csrf;
		$headers[] = 'X-Ig-App-Id: 936619743392459';
		$headers[] = $getAcc->ig_claim;
		curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

		$result = curl_exec($ch);
		if (curl_errno($ch)) {
		    echo 'Error:' . curl_error($ch);
		    curl_close($ch);
		    return false;
		}
		curl_close($ch);
		return $result;
	}

	public function getLastPublicationUrl($html, $username){
		// die(var_dump($html));
		// if(!isset(json_decode($html)->graphql->user->edge_owner_to_timeline_media)){
		if(!isset(json_decode($html)->data->user->edge_owner_to_timeline_media)){
			return null;
		}
		$newPost = [
			// 'dagelan'=> 0,
			// 'jakarta.keras'=> 0,
			// 'cristiano'=> 0,
			// 'leomessi'=> 0,
			// 'bts.bighitofficial'=> 0,
			// 'justinbieber'=> 0,
			// 'arditerwandha'=> 0,
			// 'lambe_turah'=> 0,
			'attahalilintar'=> 1
		];
		$index = isset($newPost[$username]) ? $newPost[$username] : 0;
		// $last = json_decode($html)->graphql->user->edge_owner_to_timeline_media->edges[$index];
		$last = json_decode($html)->data->user->edge_owner_to_timeline_media->edges[$index];
		if(strtotime('now') - $last->node->taken_at_timestamp > 60*2){ // 2 menit
			return false;
		}
		return [
			'code'=> $last->node->shortcode,
			'id'=> $last->node->id,
		];
	}

	public function getLastPostId($username){
		$lastpost = SessionLastpostid::find()->where(['username'=> $username])->one();
		return $lastpost ? $lastpost->post_code : null;
	}

	public function replacePostId($username, $postId){
		$lastpost = new SessionLastpostid();
		$lastpost->username = $username;
		$lastpost->post_code = $postId;
		$lastpost->updated_at = \common\Config::now();
		$save = $lastpost->createOrUpdate();
	}

	public function getCommentBody(){
		return $this->getQuotes();
		$break = false;
		$try = 1;
		$msg = '';
		while ($break == false || $try > 20) {
			$hadist = [
				'muslim',
				'bukhari',
				'tirmidzi',
				'abu-daud',
				'ibnu-majah',
				'ahmad',
				'darimi',
				'malik'
			];
			$fetch = $this->getHadist($hadist[rand(0, count($hadist) - 1)], rand(0, 9999));
			$fetch = json_decode($fetch);
			if(isset($fetch->data->contents)){
				$break = true;
				$msg = "#stopkomenhastagstop #gasukaskip #palakau 🙏🙏\n\n";
				$msg .= $fetch->data->contents->id."\n\n";
				$msg .= $fetch->data->name." No. ".$fetch->data->contents->number;
			}else{
				$try++;
				// echo "retry\n";
			}
		}

		// return $list[rand(0, count($list) - 1)];
		return $msg;
	}

	public function getQuotes(){
		$listQuotes = file_get_contents('quotes.json');
		$listQuotes = json_decode($listQuotes, true);
		if(count($listQuotes) == 0){
			return '.';
		}
		$randIndex = rand(0, count($listQuotes) - 1);
		$quotes = $listQuotes[$randIndex];
		unset($listQuotes[$randIndex]);
		$new = [];
		foreach ($listQuotes as $key => $value) {
			$new[] = $value;
		}
		$jsonfile = json_encode($new, JSON_PRETTY_PRINT);
		file_put_contents('quotes.json', $jsonfile);
		return $quotes;
	}

	public function getHadist($name, $number){
		$ch = curl_init();

		curl_setopt($ch, CURLOPT_URL, "https://api.hadith.sutanlab.id/books/{$name}/{$number}");
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
		curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'GET');

		$result = curl_exec($ch);
		if (curl_errno($ch)) {
		    // echo 'Error:' . curl_error($ch);
		    return false;
		}
		// $info = curl_getinfo($ch);
		curl_close($ch);
		return $result;
	}

	public function comment($postId, $postCode, $username){
		$instagram = new InstagramV2();
		$bTele = new BTele();
		$bTele->setChatId(645364384);
		foreach (self::ACCOUNT_USED as $keyAccount => $account) {
			$msg = "✅ {$keyAccount}\n";
			$msg .= "target: {$username}\n";
			$msg .= "link: https://www.instagram.com/p/{$postCode}\n";
			$executed = null;
			if($sendComment = in_array($username, self::AUTO_COMMENT_TARGET)){
				// $comment = $this->getCommentBody();
				$comment = '💙 fllw me';
				$instagram->setHeader($account['header']);
				$instagram->setHeaderCookie($account['headerCookie']);
				$exec = $instagram->comment('add', $postId, $comment);
				$executed = json_decode($exec);
				$status = 'null';
				if($executed === null){
					$status = 'executed';
				}else{
					$status = $executed->status;
				}
				if($status == 'ok'){
					$this->addLikeComment($executed->id, $keyAccount);
				}
				$msg .= "id: {$executed->id}\n";
				$msg .= "response: {$status}";
			}
			$bTele->setText(urlencode($msg))->sendMessage();
			var_dump($executed);
		}
	}

	public function addLikeComment($commentId, $username){
		$queue = new QueueLikecomment();
		$queue->comment_id = $commentId;
		$queue->username = $username;
		$queue->total = 99999;
		return $queue->createOrUpdate();
	}

	public function actionIndex(){
		if(self::INSTAGRAM_TARGET){
			try {
				$msg = '';
				$countNull = 0;
				$getAcc = Acc::getAccScrape();
				if(!$getAcc){
					echo "no users left to scrape target!";
					return true;
				}
				echo "user scrape: {$getAcc->username} ({$getAcc->id})\n\n";
				$msg .= "user scrape: {$getAcc->username} ({$getAcc->id})\n\n";
				foreach (self::INSTAGRAM_TARGET as $key => $username) {
					$html = $this->getInstagramHtmlNew($username, $getAcc);
					$now = \common\Config::now();
					$lastPublicationUrl = $this->getLastPublicationUrl($html, $username);
					$lastPostId = $this->getLastPostId($username);
					if($lastPublicationUrl === false){
						echo "{$username}: New post, but more than 2 minutes\n";
					}else
					if($lastPublicationUrl === null){
						$countNull++;
						$msg .= "{$username}: null\n";
						echo "{$username}: null\n";
					}else
					if($lastPublicationUrl['code'] == $lastPostId){
						echo "{$username}: Not new post\n";
					}else{
						$this->replacePostId($username, $postId = $lastPublicationUrl['code']);
						echo "{$username}: New post\n";
						$this->comment($postId = $lastPublicationUrl['id'], $postCode = $lastPublicationUrl['code'], $username);
					}
					sleep(1);
				}
				if($countNull){
					if($countNull == count(self::INSTAGRAM_TARGET)){
						$getAcc->use_scrapping = false;
						$msg .= "this account was set use_scrapping to false\n";
					}
					$bTele = new BTele();
					$bTele->setChatId(645364384);
					$bTele->setText(urlencode($msg))->sendMessage();
				}
				$getAcc->last_use_scrapping = $now;
				$getAcc->update();
			} catch (\Exception $e) {
				var_dump($e);
			}
		}
		return true;
	}

}